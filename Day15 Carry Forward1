1)Problem Description

Given an integer array A containing N distinct integers, you have to find all the leaders in array A. An element is a leader if it is strictly greater than all the elements to its right side.

NOTE: The rightmost element is always a leader.

Problem Constraints

1 <= N <= 105
1 <= A[i] <= 108
Input Format

There is a single input argument which a integer array A
Output Format

Return an integer array denoting all the **leader elements** of the array.
NOTE: Ordering in the output doesn't matter.

Example Input

 A = [16, 17, 4, 3, 5, 2]
Example Output

 [17, 2, 5]
 
 Ans)
 
 public class Solution {
    public ArrayList<Integer> solve(ArrayList<Integer> A) {
        ArrayList<Integer> al =new ArrayList<>();
        
        int max= A.get(A.size()-1);
        al.add(max);
        for(int i= A.size()-2;i>=0;i--){
            if(A.get(i)> max){
                max = A.get(i);
                al.add(A.get(i));

            }
        }

        return al;
      
    }
}


2)Problem Description
Given an array A, find the size of the smallest subarray such that it contains at least one occurrence of the maximum value of the array

and at least one occurrence of the minimum value of the array.



Problem Constraints
1 <= |A| <= 2000



Input Format
First and only argument is vector A



Output Format
Return the length of the smallest subarray which has at least one occurrence of minimum and maximum element of the array

A)public class Solution {
    public int solve(ArrayList<Integer> A) {

        int max = A.get(0);

        int min = A.get(0);

        int lastMinIndex = -1;

        int lastMaxIndex = -1;

        int smallestSubbAraaySize = A.size();

        for(int i=1; i< A.size();i++){
            if(max < A.get(i)){
                max = A.get(i);
            }

            if(min > A.get(i)){
                min = A.get(i);
            }
        }
        for(int i=0 ; i< A.size(); i++){

            if( A.get(i) == min ) {
                lastMinIndex = i;
                if(lastMaxIndex >0){
                    smallestSubbAraaySize = Math.min(smallestSubbAraaySize, i-lastMaxIndex+1);
                }
            }

            if(A.get(i) == max) {
                lastMaxIndex =i;

                if(lastMinIndex > 0){
                    smallestSubbAraaySize = Math.min(smallestSubbAraaySize, i-lastMinIndex+1);
                }
            }
        }
        
        return smallestSubbAraaySize;
    }


}


3)Problem Description
You have given a string A having Uppercase English letters.

You have to find how many times subsequence "AG" is there in the given string.

NOTE: Return the answer modulo 109 + 7 as the answer can be very large.



Problem Constraints
1 <= length(A) <= 105



Input Format
First and only argument is a string A.



Output Format
Return an integer denoting the answer.



Example Input
Input 1:

 A = "ABCGAG"
Input 2:

 A = "GAB"


Example Output
Output 1:

 3
Output 2:

 0


Example Explanation
Explanation 1:

 Subsequence "AG" is 3 times in given string 
Explanation 2:

 There is no subsequence "AG" in the given string.


Ans)public class Solution {
    public int solve(String A) {

        char a[] = A.toCharArray();

        long countPairs=0;

        int countA=0;

        

        for(int i=0; i< a.length; i++){
            if(a[i] == 'A'){
                countA++;
            }
            if(a[i] == 'G' && countA > 0){
                countPairs = countPairs + countA;
            }
        }

        return (int)(countPairs% (Math.pow(10,9)+7));

    }
}










