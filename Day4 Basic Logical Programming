1)Problem Description
You are given an integer A. You have to tell whether it is a perfect number or not.

Perfect number is a positive integer which is equal to the sum of its proper positive divisors.

A proper divisor of a natural number is the divisor that is strictly less than the number.



Problem Constraints
1 <= A <= 106



Input Format
First and only argument contains a single positive integer A.



Output Format
Return 1 if A is a perfect number and 0 otherwise.



Example Input
Input 1:

A = 4
Input 2:

A = 6


Example Output
Output 1:

0 
Output 2:

1 


Example Explanation
Explanation 1:

For A = 4, the sum of its proper divisors = 1 + 2 = 3, is not equal to 4.
Explanation 2:

For A = 6, the sum of its proper divisors = 1 + 2 + 3 = 6, is equal to 6. 

Solution)
public class Solution {
    public int solve(int A) {
        int sum =0;
        for(int i=1; i < A ; i++){
        
            if(A%i==0){
                sum=sum+i;
               
            }
        }
         
        return sum==A ? 1 :0;
    }
}

2)Problem Description
You will be given an integer n. You need to return the count of prime numbers less than or equal to n.


Problem Constraints
0 <= n <= 10^3


Input Format
Single input parameter n in function.


Output Format
Return the count of prime numbers less than or equal to n.


Example Input
Input 1: 19
Input 2: 1


Example Output
Output 1: 8
Output 2: 0


Example Explanation
Explanation 1: Primes <= 19 are 2, 3, 5, 7, 11, 13, 17, 19
Explanation 2: There are no primes <= 1 

Solution)
public class Solution {
    public int solve(int A) {
        int primeCount = 0;

        for(int i=2;i<=A;i++){
            if(isPrime(i)){
                primeCount++;
            }

        }
        
        return primeCount;
    }

    public static  boolean isPrime(int A){
        int factorsCount=0;
        for(int i=1 ; i*i <= A ; i++){
            if( A%i ==0) {
                factorsCount=factorsCount+2;
                if(factorsCount >2){
                    break;
                }
            }
        }
        return factorsCount ==2 ? true : false;
    }
}

3)Given two integers A and B. A represents the count of mangoes and B represent the count of slices of mangoes. Mango can be cut into three slices of mangoes. A glass of mango shake can be formed by two slices of mangoes.

Find the maximum number of glasses of mango shakes you can make with A mangoes and B slices of mangoes initially.


Input Format

The First argument is an integer A.
The Second argument is an integer B.
Output Format

Return the maximum number of glasses of mango shakes you can make.
Constraints

0 <= A, B <= 10^8
For Example

Input 1:
    A = 19
    B = 0
Output 1:
    28

Input 2:
    A = 7
    B = 1
Output 2:
    11
    
 Solution)
 
 public class Solution {
    public int solve(int A, int B) {
        int totalSlices=A*3+B;
        return totalSlices/2;
    }
}
