1)The prefix sum formula for an array A of N integers is given by :-

A)prfSum(i) = prfSum(i-1)+arr[i]

2) What is the time complexity of creating the prefix sum array of an array A of N integers ?

A)O(N)

3)Problem Description
You are given an integer array A of length N.
You are also given a 2D integer array B with dimensions M x 2, where each row denotes a [L, R] query.
For each query, you have to find the sum of all elements from L to R indices in A (0 - indexed).
More formally, find A[L] + A[L + 1] + A[L + 2] +... + A[R - 1] + A[R] for each query.



Problem Constraints
1 <= N, M <= 105
1 <= A[i] <= 109
0 <= L <= R < N


Input Format
The first argument is the integer array A.
The second argument is the 2D integer array B.


Output Format
Return an integer array of length M where ith element is the answer for ith query in B.


Example Input
Input 1:
A = [1, 2, 3, 4, 5]
B = [[0, 3], [1, 2]]
Input 2:

A = [2, 2, 2]
B = [[0, 0], [1, 2]]


Example Output
Output 1:
[10, 5]
Output 2:

[2, 4]


Note:below solution Testcase Hard is failing need to be fixed

Ans)
public class Solution {
    public ArrayList<Long> rangeSum(ArrayList<Integer> A, ArrayList<ArrayList<Integer>> B) {
        getPrefix(A);
            ArrayList<Long> countOfSum = new ArrayList<>();
        for(ArrayList<Integer> c:B){
            int l= c.get(0);
            int r= c.get(1);
             if(l==0){
                 countOfSum.add(new Long(A.get(r)));
            }
            else{
                
                countOfSum.add(new Long(A.get(r)-A.get(l-1)));
               
            }
           
        }
         return countOfSum;
    }

    private static void getPrefix(ArrayList<Integer> A){
        for(int i=1; i < A.size() ; i++){
            A.set(i,A.get(i-1)+A.get(i));
        }

    }
}

4)Problem Description
Given an array A of N integers. Construct prefix sum of the array in the given array itself.


Problem Constraints
1 <= N <= 105
1 <= A[i] <= 103


Input Format
Only argument A is an array of integers.


Output Format
Return an array of integers denoting the prefix sum of the given array.


Example Input
Input 1:

A = [1, 2, 3, 4, 5]
Input 2:

A = [4, 3, 2]


Ans)public class Solution {
    public ArrayList<Integer> solve(ArrayList<Integer> A) {
         for(int i=1; i < A.size() ; i++){
            A.set(i,A.get(i-1)+A.get(i));
        }
        return A;
    }
}


5)Problem Description
You are given an array A of integers of size N.

Your task is to find the equilibrium index of the given array

The equilibrium index of an array is an index such that the sum of elements at lower indexes is equal to the sum of elements at higher indexes.

If there are no elements that are at lower indexes or at higher indexes, then the corresponding sum of elements is considered as 0.

Note:

Array indexing starts from 0.
If there is no equilibrium index then return -1.
If there are more than one equilibrium indexes then return the minimum index.


Problem Constraints
1 <= N <= 105
-105 <= A[i] <= 105


Input Format
First arugment is an array A .


Output Format
Return the equilibrium index of the given array. If no such index is found then return -1.


Example Input
Input 1:
A = [-7, 1, 5, 2, -4, 3, 0]
Input 2:

A = [1, 2, 3]


Ans)

public class Solution {
    public int solve(ArrayList<Integer> A) {
        prefixSum(A);
        //  System.out.println("prefixSum"+A);
        int firstIndexEquilibrium=( A.get(A.size()-1)-A.get(0)) == 0? 1:-1;
       if(firstIndexEquilibrium ==1){
           return 0;
       }
        for(int i=1 ; i<A.size() ; i++){
            int lowerSum= A.get(i-1);
            int higherSum=  A.get(A.size()-1)-A.get(i);
            if(lowerSum == higherSum){
                return i;
            }
        }
        //  int lastIndexEquilibrium = A.get(A.size()-2)==0 ? 1:-1;
        return  A.get(A.size()-2)==0 ? 1:-1;
    }

    private static void prefixSum(ArrayList<Integer> A){
        for(int i=1; i<A.size(); i++){
            A.set(i, A.get(i)+A.get(i-1));
        }
    }
}


6)Problem Description
You are given an array A of length N and Q queries given by the 2D array B of size QÃ—2.

Each query consists of two integers B[i][0] and B[i][1].

For every query, your task is to find the count of even numbers in the range from A[B[i][0]] to A[B[i][1]].



Problem Constraints
1 <= N <= 105
1 <= Q <= 105
1 <= A[i] <= 109
0 <= B[i][0] <= B[i][1] < N


Input Format
First argument A is an array of integers.
Second argument B is a 2D array of integers.


Output Format
Return an array of integers.


Example Input
Input 1:
A = [1, 2, 3, 4, 5]
B = [   [0, 2] 
        [2, 4]
        [1, 4]   ]
Input 2:
A = [2, 1, 8, 3, 9, 6]
B = [   [0, 3]
        [3, 5]
        [1, 3] 
        [2, 4]   ]


Example Output
Output 1:
[1, 1, 2]
Output 2:
[2, 1, 1, 1]

Ans)

public class Solution {
    public ArrayList<Integer> solve(ArrayList<Integer> A, ArrayList<ArrayList<Integer>> B) {
        // System.out.println("Before prefix"+A);
        prefixEven(A);
        // System.out.println("After prefix"+A);
        ArrayList<Integer> rangeEvenCount=new ArrayList<>();
     for(ArrayList<Integer> query:B){
        int l= query.get(0);
        int r= query.get(1);

        if(l==0){
            rangeEvenCount.add(A.get(r));
        }else{
            rangeEvenCount.add(A.get(r)-A.get(l-1));
        }
     }   
    return rangeEvenCount;
    }   
    

    private static void prefixEven(ArrayList<Integer> A){
        int j=0;
        for(Integer a:A){
            A.set(j++, a%2==0 ? 1 :0);
            // i++;
        }

        for(int i=1; i < A.size() ; i++){
            A.set(i, A.get(i)+A.get(i-1));
        }
    }
}
